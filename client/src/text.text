const data = {
  spring: {
    fruits: [
      { id: 1, name: 'Cherry', image: 'cherry.jpg', description: 'Sweet and juicy' },
      { id: 2, name: 'Strawberry', image: 'strawberry.jpg', description: 'Bright red and delicious' },
      // ... other spring fruits
    ],
    recipes: [
      { id: 1, name: 'Strawberry Shortcake', season: 'spring', image: 'shortcake.jpg', description: 'A classic dessert perfect for springtime', ownerId: 123, createdAt: '2022-04-01', },
      { id: 2, name: 'Cherry Pie', season: 'spring', image: 'pie.jpg', description: 'A sweet and tart pie that is great for any occasion', ownerId: 456, createdAt: '2022-05-01' }
      // ... other spring recipes
    ]
  },
  summer: {
    fruits: [
      { id: 1, name: 'Watermelon', image: 'watermelon.jpg', description: 'Juicy and refreshing' },
      { id: 2, name: 'Peach', image: 'peach.jpg', description: 'Soft and fuzzy with a sweet aroma' },
      // ... other summer fruits
    ],
    recipes: [
      { id: 1, name: 'Grilled Peach Salad', season: 'summer', image: 'salad.jpg', description: 'A light and refreshing summer salad with grilled peaches', ownerId: 123, createdAt: '2022-06-01', },
      { id: 2, name: 'Watermelon Lemonade', season: 'summer', image: 'lemonade.jpg', description: 'A cool and refreshing summer drink', ownerId: 456, createdAt: '2022-07-01', },
      // ... other summer recipes
    ],
  },
  autumn: {
    fruits: [
      { id: 1, name: 'Apple', image: 'apple.jpg', description: 'Crisp and sweet' },
      { id: 2, name: 'Pumpkin', image: 'pumpkin.jpg', description: 'Perfect for pies and soups' },
      // ... other autumn fruits
    ],
    recipes: [
      { id: 1, name: 'Apple Crisp', season: 'autumn', image: 'crisp.jpg', description: 'A warm and comforting dessert for chilly autumn nights', ownerId: 123, createdAt: '2022-09-01', },
      { id: 2, name: 'Pumpkin Soup', season: 'autumn', image: 'soup.jpg', description: 'A hearty soup perfect for cool autumn days', ownerId: 456, createdAt: '2022-10-01', },
      // ... other autumn recipes
    ],
  },
  winter: {
    fruits: [
      { id: 1, name: 'Cranberry', image: 'cranberry.jpg', description: 'Tart and tangy' },
      { id: 2, name: 'Orange', image: 'orange.jpg', description: 'Sweet and juicy' },
      // ... other winter fruits
    ],
    recipes: [
      { id: 1, name: 'Cranberry Sauce', season: 'winter', image: 'sauce.jpg', description: 'A classic side', ownerId: 456, createdAt: '2022-10-01'},
      { id: 2, name: 'Pumpkin Soup', season: 'autumn', image: 'soup.jpg', description: 'A hearty soup perfect for cool autumn days', ownerId: 456, createdAt: '2022-10-01', },
      // ... other autumn recipes
    ]
  }
}

//&&&&&&&&&&&&&&&&&&&&&&&& <div className="bann_title">Kidâ€™s &amp; Vegan Menu</div>




/**
 In this structure, each season is represented by an object with two properties: `fruits` and `recipes`. 
The `fruits` property is an array of objects representing the different fruits 
for that season, and the `recipes` property is an array of objects representing 
the different recipes for that season.

Each fruit and recipe object has a set of properties that describe it, 
such as `id`, `name`, `image`, and `description` 
for fruits, and `id`, `name`, `season`, `image`, `description`, `ownerId`, `createdAt` for recipes.

You can use this data structure to populate the tables in your React app,
and use React components to display the fruit and recipe data in a visually appealing way. 
For example, you could create a `<SeasonFruit>` component that 
takes a fruit object as a prop and displays the fruit's 
name, image, and description, and a `<SeasonRecipe>` 
component that takes a recipe object as a 
prop and displays the recipe's name, image, and description, 
along with other details like the season, owner, and creation date.


****************

Whether to use a big object or an array of objects for your data really depends on the specific needs of your application. 
In general, arrays are better suited for ordered lists of data, 
while objects are better suited for data that can be accessed using a key or identifier.

In the case of your app with four tables for the four seasons, 
it may make sense to use an object with properties for each season, as in the example I provided. 
This allows you to access the data for each season directly by its name (e.g. data.spring.fruits), 
which may be more convenient than having to loop through an array to find the desired data.

However, if you need to display the data in a specific order or need to 
sort the data based on certain criteria, it may be better to use an array of objects instead. 
For example, if you need to display the fruits and recipes in alphabetical order, it would be easier 
to sort an array than to manipulate an object.

Ultimately, the best approach will depend on the specific needs of your 
application and how you plan to use the data.

********************

// Create an empty data object to store the sorted data
const data = {
  spring: { fruits: [], recipes: [] },
  summer: { fruits: [], recipes: [] },
  autumn: { fruits: [], recipes: [] },
  winter: { fruits: [], recipes: [] },
};

// Loop through the users array and add each recipe to the corresponding season in the data object
users.forEach(user => {
  user.recipes.forEach(recipe => {
    data[recipe.season].recipes.push(recipe);
  });
});

**************************
// Assume userId is the ID of the user whose recipes you want to list

// Create an empty array to store the user's recipes
const userRecipes = [];

// Loop through the seasons and filter the recipes based on the ownerId property
Object.values(data).forEach(season => {
  season.recipes.forEach(recipe => {
    if (recipe.ownerId === userId) {
      userRecipes.push(recipe);
    }
  });
});

// The userRecipes array now contains all of the recipes owned by the specified user
console.log(userRecipes);

*********************
In terms of performance, it is generally better to only include the necessary 
data in your objects and filter it when needed, rather than duplicating data across multiple objects. 
This can help reduce the size of your data structures and make your code more efficient.

In the case of listing a user's recipes, it would be more efficient to iterate 
through the seasons and filter the recipes based on the ownerId property, rather 
than including all of a user's recipes in the users object. This avoids duplicating 
data and only retrieves the relevant recipes when they are needed, which can improve performance.

However, performance can also depend on other factors such as the size 
of the data set, the complexity of your code, and the hardware and software environment 
that your code is running on. It's important to consider these factors and test your code 
under different conditions to determine the most efficient approach.

 */

